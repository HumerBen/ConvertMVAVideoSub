1
0:0:5:180 --> 0:0:10:240
大家好，我是来自 www.LearnVisualStudio.net 的 Bob Tabor，

2
0:0:10:290 --> 0:0:12:870
我主要负责教授初学者所需的技能，

3
0:0:12:920 --> 0:0:16:440
帮助他们尽快在全球一流的公司谋得第一份软件开发工作，

4
0:0:16:490 --> 0:0:19:980
并构建 Windows 和 Web 应用。

5
0:0:20:30 --> 0:0:22:760
这节课将介绍如何构建最简单的 C# 应用程序，

6
0:0:22:810 --> 0:0:27:820
即 Hello World 应用程序。

7
0:0:27:870 --> 0:0:32:760
它将在 Windows 控制台窗口中显示 Hello World 消息。

8
0:0:32:810 --> 0:0:35:570
在这节课中我不会解释太多内容。

9
0:0:35:620 --> 0:0:38:820
您将了解工作流程。换言之，如何创建一个新项目，

10
0:0:38:870 --> 0:0:43:410
在何处键入代码，如何测试应用程序是否有效，等等。

11
0:0:43:460 --> 0:0:46:720
目前只需跟着我操作即可，

12
0:0:46:770 --> 0:0:50:50
即使有的地方不明白也无需担心。

13
0:0:50:360 --> 0:0:52:720
在接下来的几节课中，我们将剖析这个例子，

14
0:0:52:770 --> 0:0:55:350
解释我们编写的每一行代码，

15
0:0:55:400 --> 0:0:59:350
以及这样编写的原因。

16
0:0:59:400 --> 0:1:4:80
我将假设您已安装最新版本的 Visual Studio Express，

17
0:1:4:130 --> 0:1:8:730
或者更高版本，

18
0:1:8:780 --> 0:1:11:810
您也许会问，接下来要怎么办？

19
0:1:11:860 --> 0:1:15:90
如果您没错过上节课的话，

20
0:1:15:140 --> 0:1:17:490
上节课我们打开了这个页面。

21
0:1:17:540 --> 0:1:22:110
下面我要关闭该窗口，向您展示如何返回到 Visual Studio。

22
0:1:22:160 --> 0:1:27:730
在 Windows 8.1 中我要按名称查看我的所有应用，

23
0:1:27:780 --> 0:1:32:900
在应用列表中找到 Visual Studio Express 2013 for Desktop。

24
0:1:32:950 --> 0:1:35:700
右键单击它，

25
0:1:35:750 --> 0:1:40:860
这会调出一个小任务栏，然后我选择 Pin to taskbar。

26
0:1:41:710 --> 0:1:44:600
从现在起，每当我返回到桌面，

27
0:1:45:910 --> 0:1:49:760
都可以在任务栏中看到 Visual Studio 图标，

28
0:1:49:810 --> 0:1:54:320
您可以在本课程结束后删除该图标。

29
0:1:54:370 --> 0:1:57:960
但这确实是返回 Visual Studio 的一种快捷方式。

30
0:1:58:10 --> 0:2:1:270
下面单击 Visual Studio 图标，

31
0:2:1:910 --> 0:2:6:310
启动 Visual Studio，在 Visual Studio 的 File 菜单中，

32
0:2:6:360 --> 0:2:10:990
选择 New Project。在 New Project 对话框中，

33
0:2:11:40 --> 0:2:14:600
选择一个项目模板。

34
0:2:14:650 --> 0:2:18:580
首先，确保您选择 Visual C# 模板。

35
0:2:18:630 --> 0:2:22:610
有很多次，

36
0:2:22:660 --> 0:2:26:760
我无意中选择了 Visual Basic。

37
0:2:26:810 --> 0:2:31:920
然后在中央窗格中选择 Console Application，

38
0:2:31:970 --> 0:2:35:730
我要删除默认的名称，

39
0:2:35:780 --> 0:2:39:40
键入 Hello，大写 W，

40
0:2:39:90 --> 0:2:43:940
不加空格，HelloWorld 中的 H 和 W 都大写，

41
0:2:43:990 --> 0:2:47:120
然后单击右下角的 OK 按钮。

42
0:2:47:740 --> 0:2:50:600
稍后您会看到 Visual Studio

43
0:2:50:650 --> 0:2:53:990
将基于您选择的项目模板，即 Windows 控制台应用程序，

44
0:2:54:40 --> 0:2:57:120
创建一个新项目。

45
0:2:57:170 --> 0:2:59:420
在本课程的后面，您将了解到

46
0:2:59:470 --> 0:3:2:340
项目模板是什么，以及它能为您提供什么。

47
0:3:2:390 --> 0:3:6:750
现在我们继续完成本节课的任务。

48
0:3:6:800 --> 0:3:16:400
对话框消失，我们载入集成开发环境 (IDE) 的主窗格。

49
0:3:16:400 --> 0:3:22:740
我想找到 static void Main 下面的开闭花括号。

50
0:3:22:790 --> 0:3:26:720
我想键入以下代码，

51
0:3:26:770 --> 0:3:30:270
将鼠标光标放在开闭花括号中间，

52
0:3:30:320 --> 0:3:32:810
单击键盘上的 Enter 键。

53
0:3:32:860 --> 0:3:34:760
单击 Enter 多次，留出一些空间供我键入代码。

54
0:3:34:810 --> 0:3:38:130
然后我开始键入 Console，

55
0:3:38:580 --> 0:3:41:220
可以看到执行此操作时，

56
0:3:41:650 --> 0:3:46:920
在键入之处下方有一个弹出菜单弹出。

57
0:3:46:970 --> 0:3:50:970
先不要让它分散您的注意力。稍后它将成为您最好的帮手。

58
0:3:51:20 --> 0:3:54:560
暂时忽略它。

59
0:3:54:610 --> 0:3:59:660
在这两个花括号之间键入以下代码：console.WriteLine。

60
0:4:3:220 --> 0:4:7:530
然后使用两个双引号。

61
0:4:7:580 --> 0:4:14:540
我在这两个双引号之间键入 Hello World。

62
0:4:15:390 --> 0:4:21:230
然后在这行代码末尾添加一个冒号。

63
0:4:21:280 --> 0:4:24:220
Console.WriteLine 中 C 要大写，

64
0:4:25:420 --> 0:4:29:740
W 和 L 要大写，Write 与 Line 之间无空格，

65
0:4:29:790 --> 0:4:35:290
一个左括号，一个双引号，Hello 与 World 之间有一个空格，

66
0:4:35:340 --> 0:4:39:670
然后是另一个双引号，一个右括号，

67
0:4:40:310 --> 0:4:43:210
结尾是一个冒号。

68
0:4:44:190 --> 0:4:45:940
下面为 ReadLine 写一行类似的代码。

69
0:4:47:550 --> 0:4:52:850
同样 Console 中的 C 要大写，

70
0:4:53:130 --> 0:4:59:430
.ReadLine，大写 R，大写 L，左括号，

71
0:4:59:480 --> 0:5:2:980
右括号，中间无内容，结尾是一个冒号。

72
0:5:4:260 --> 0:5:7:150
我希望您检查一下代码，

73
0:5:7:200 --> 0:5:10:380
确保与我屏幕上的一样。大写很重要，

74
0:5:10:430 --> 0:5:15:770
是否有空格也很重要，

75
0:5:15:820 --> 0:5:20:100
双引号、左右括号、冒号等

76
0:5:20:350 --> 0:5:24:920
特殊字符的使用也要与我这里一样。

77
0:5:24:970 --> 0:5:29:460
如果您在键入的任何内容下看到红色波浪线，

78
0:5:29:510 --> 0:5:33:860
这是 Visual Studio 在提示您

79
0:5:33:910 --> 0:5:37:240
没有正确键入特定内容。

80
0:5:37:290 --> 0:5:40:490
因此花点时间检查您的工作，然后再继续后面的操作。

81
0:5:40:540 --> 0:5:43:140
接下来单击顶部工具栏中的 Save All 按钮，

82
0:5:43:190 --> 0:5:47:900
然后运行应用程序。

83
0:5:47:950 --> 0:5:51:190
为此单击工具栏中的这个 Start 按钮。

84
0:5:51:240 --> 0:5:56:370
该按钮紧挨绿色三角形按钮。

85
0:5:56:420 --> 0:5:59:300
如果一切无误的话，您应看到一个 Windows 命令

86
0:6:0:130 --> 0:6:5:70
或控制台窗口打开，其中显示 Hello World 消息。

87
0:6:5:120 --> 0:6:8:970
好极了。下面单击右上角的红叉，

88
0:6:9:20 --> 0:6:11:840
您可以看到 Visual Studio 返回到先前的状态。

89
0:6:11:890 --> 0:6:15:110
可能有其他一些窗口打开。

90
0:6:15:160 --> 0:6:19:430
您可以暂时关闭这些窗口。

91
0:6:19:480 --> 0:6:22:680
如果您看到 There were build errors 消息，那么可能因为

92
0:6:22:730 --> 0:6:25:260
您未正确键入代码。下面我们来看几个场景，

93
0:6:25:310 --> 0:6:30:140
了解人们首次编写软件时遇到的一些常见问题。

94
0:6:31:140 --> 0:6:35:0
当您看到此对话框：发生生成错误。

95
0:6:35:50 --> 0:6:38:550
要继续并运行上次的成功生成吗？

96
0:6:39:100 --> 0:6:42:780
选择 No 按钮。

97
0:6:42:830 --> 0:6:45:840
然后您会看到在 IDE、Visual Studio 底部

98
0:6:45:890 --> 0:6:49:960
出现一个错误列表，

99
0:6:50:10 --> 0:6:53:580
提示您问题出在哪里。最快的解决方法是，

100
0:6:53:630 --> 0:6:57:850
仔细观察您键入的代码，

101
0:6:57:900 --> 0:7:2:230
看看与我编写的代码有何不同之处。

102
0:7:2:280 --> 0:7:6:540
一些可能的错误消息和补救措施如下。

103
0:7:6:590 --> 0:7:8:640
首先您可以看到这条消息：

104
0:7:9:320 --> 0:7:14:200
类、结构或接口成员声明中的标记“(”无效。

105
0:7:14:920 --> 0:7:19:300
正如您将在后面学到的，花括号用于定义代码块。

106
0:7:19:350 --> 0:7:23:390
不同的命令属于不同类型的代码块，

107
0:7:23:440 --> 0:7:26:30
我们会在后面的一节课中讨论这些命令。

108
0:7:26:80 --> 0:7:29:570
但现在如果您看到这条消息，也许是因为

109
0:7:29:620 --> 0:7:31:840
您未将代码放到合适的位置。

110
0:7:31:890 --> 0:7:36:100
务必将代码放在 static void Main 下方的开闭花括号中。

111
0:7:36:150 --> 0:7:39:870
因此我将使用我的鼠标光标，

112
0:7:39:920 --> 0:7:43:580
高亮显示这两行代码，按组合键 Ctrl+X，

113
0:7:43:630 --> 0:7:49:50
将鼠标光标移到这里面，按组合键 Ctrl+V

114
0:7:49:100 --> 0:7:53:740
将代码粘贴进来，这样应用程序应该就能恢复正常了。

115
0:7:55:300 --> 0:7:59:960
如果您看到 build errors 对话框，

116
0:8:0:10 --> 0:8:6:180
而且消息是第 13 和 14 行缺少冒号，

117
0:8:6:230 --> 0:8:10:160
如要修复这个问题，您所需做的就是

118
0:8:10:210 --> 0:8:15:270
在您编写的两行代码末尾加冒号，就像这样。

119
0:8:15:320 --> 0:8:20:0
就像正确的英文句子必须以标点符号结尾一样，

120
0:8:20:50 --> 0:8:24:60
C# 代码也必须以冒号结尾。您的代码中缺少冒号，

121
0:8:24:110 --> 0:8:27:700
因此添加冒号后，您的应用程序应该就能运行了。

122
0:8:27:750 --> 0:8:34:300
好了。如果您看到 build errors 对话框，

123
0:8:34:350 --> 0:8:39:350
而且消息是缺少 )，

124
0:8:39:400 --> 0:8:43:850
无效的表达式项“)”，缺少冒号或其他标点符号，

125
0:8:43:900 --> 0:8:46:570
当然，这从错误消息中

126
0:8:46:620 --> 0:8:49:140
解释起来有点复杂。

127
0:8:49:850 --> 0:8:54:130
Hello World 必须用双引号括起来。

128
0:8:54:180 --> 0:8:58:660
确保您的代码中对 Hello 和 World

129
0:8:58:710 --> 0:9:2:400
这两个词用了双引号，正如您在我的屏幕上看到的。

130
0:9:3:780 --> 0:9:8:50
原因在于，我们希望这两个词被逐字写到屏幕上。

131
0:9:8:100 --> 0:9:11:20
因此我们使用双引号来表示，

132
0:9:11:70 --> 0:9:15:380
这些词代表一个字符串文本。

133
0:9:15:430 --> 0:9:18:680
我们会在后面几节课中讨论字符串和字符串文本。

134
0:9:18:730 --> 0:9:23:360
目前只需对 Hello World 使用这些双引号应该就可以了。

135
0:9:23:410 --> 0:9:30:370
很好。如果您看到 build errors 对话框，

136
0:9:31:0 --> 0:9:34:910
而且错误消息是当前上下文中不存在名称 Console，

137
0:9:35:550 --> 0:9:40:80
最可能的原因就是 console 中的 c 没有大写。

138
0:9:40:130 --> 0:9:43:610
或者可能您拼错了这个词，但我猜想，

139
0:9:43:660 --> 0:9:47:220
很多初学者没有意识到 C# 区分大小写，

140
0:9:47:270 --> 0:9:51:70
因此 console 中 c 不采用小写。可以看到

141
0:9:51:120 --> 0:9:56:260
蓝色波浪线给出提示，Console 中的 C 使用大写。

142
0:9:56:310 --> 0:9:59:920
我多次讲过，C# 对大写很挑剔。

143
0:9:59:970 --> 0:10:2:520
因此从现在起到本系列课程结束，您键入的代码一定要与我的完全一致。

144
0:10:2:570 --> 0:10:6:300
对 C# 而言，Console 与 console

145
0:10:6:350 --> 0:10:9:710
是两个不同的概念。

146
0:10:9:760 --> 0:10:14:120
因此只要将 Console 中的 C 大写，

147
0:10:14:170 --> 0:10:15:640
您的应用程序应该就没问题了。

148
0:10:15:690 --> 0:10:21:530
很好。类似地，如果您看到 build errors 对话框，

149
0:10:21:580 --> 0:10:25:640
并且消息是‘System.Console’不包含‘writeline’或‘readline’的定义，

150
0:10:25:690 --> 0:10:32:10
原因是类似的。因为 WriteLine 中

151
0:10:32:60 --> 0:10:36:140
的 W 和 L 必须大写。

152
0:10:36:190 --> 0:10:40:960
ReadLine 中的 R 和 L 也必须大写。

153
0:10:41:550 --> 0:10:44:680
准确性对 C# 而言很重要。

154
0:10:44:730 --> 0:10:47:0
Visual Studio 文本编辑器中有一些快捷方式

155
0:10:47:50 --> 0:10:50:840
会帮助您提高键入代码的速度和准确度，

156
0:10:50:890 --> 0:10:52:680
稍后会介绍这些快捷方式，

157
0:10:52:730 --> 0:10:55:960
它们将帮助您永远不会出错。

158
0:10:56:10 --> 0:10:59:960
但如果您看到错误消息，指出 Console 应包含‘WriteLine’的定义，

159
0:11:0:10 --> 0:11:4:240
如果没拼错的话，

160
0:11:4:290 --> 0:11:7:730
确保大小写也正确。

161
0:11:7:780 --> 0:11:10:940
如果您在键入代码时发现一些错误或问题，

162
0:11:10:990 --> 0:11:14:940
注意一下错误列表，正如我们目前为止所做的，

163
0:11:14:990 --> 0:11:19:190
让错误列表指导您修复错误。

164
0:11:19:940 --> 0:11:22:940
坦白讲，通常都是一些小问题。

165
0:11:22:990 --> 0:11:27:330
一旦您对 C# 语法有了更多了解，这些问题发生的次数会越来越少，

166
0:11:27:380 --> 0:11:31:500
或者至少您能够利用代码下方出现的

167
0:11:31:550 --> 0:11:35:480
蓝色和红色波浪线快速发现或识别这些问题。

168
0:11:35:530 --> 0:11:39:140
我们将在后面的一节课中讲解它们的意义。

169
0:11:40:120 --> 0:11:43:180
解决了这些问题后，您就能够顺利

170
0:11:43:230 --> 0:11:44:440
构建应用程序了。

171
0:11:45:190 --> 0:11:50:610
编写 C# 代码是一项准确性要求较高的工作。

172
0:11:50:660 --> 0:11:55:680
幸运的是，IDE 将帮助您正确编写代码。

173
0:11:55:730 --> 0:11:59:140
或者它至少会告诉您问题出在哪里。

174
0:11:59:190 --> 0:12:2:100
下节课我们将集中探讨

175
0:12:2:150 --> 0:12:6:890
我们编写的 C# 代码的语法。

176
0:12:6:940 --> 0:12:10:880
如果准确性要求高，那么您需要明白我们键入的

177
0:12:10:930 --> 0:12:12:750
所有这些词和符号的意义是什么。

178
0:12:12:800 --> 0:12:15:920
一旦您掌握了这些基础知识，开发就变得很简单了。

179
0:12:15:970 --> 0:12:18:970
下节课再见。谢谢大家。

